Constructors
============

Java Constructors
Java constructors or constructors in Java is a terminology used to construct something in our programs. A constructor in Java is a special method that is used to initialize objects. The constructor is called when an object of a class is created. It can be used to set initial values for object attributes.
What are Constructors in Java?
In Java, a Constructor is a block of codes similar to the method. It is called when an instance of the class is created. At the time of calling the constructor, memory for the object is allocated in the memory. It is a special type of method that is used to initialize the object. Every time an object is created using the new() keyword, at least one constructor is called.

How Java Constructors are Different from Java Methods?
Constructors must have the same name as the class within which it is defined; it is not necessary for the method in Java.
Constructors do not return any type while method(s) have the return type or void if it does not return any value.
Constructors are called only once at the time of Object creation while method(s) can be called any number of times.

A constructor in Java can not be abstract, final, static, or Synchronized.
Access modifiers can be used in constructor declaration to control its access i.e which other class can call the constructor.

Types of Constructors in Java

->Default Constructor
->Parameterized Constructor
->Copy Constructor

1. Default Constructor in Java
A constructor that has no parameters is known as default the constructor. A default constructor is invisible. And if we write a constructor with no arguments, the compiler does not create a default constructor.
2. Parameterized Constructor in Java
A constructor that has parameters is known as a parameterized constructor. If we want to initialize fields of the class with our own values, then use a parameterized constructor.
3. Copy Constructor in Java
Unlike other constructors, a copy constructor is passed with another object which copies the data available from the passed object to the newly created object.


