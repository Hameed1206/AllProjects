Day 34 - Arrays


int[] irr = {2, 4, 1, 3, 5, 7, 6};
		
		System.out.println("Before "+ Arrays.toString(irr));
		
		Arrays.sort(irr);
		
		System.out.println("After "+Arrays.toString(irr));
		
		int[] irr2 = new int[irr.length];
        int a = 0;
		for (int i = irr.length-1;  i>=0;  i--) {
			irr2[a] = irr[i];
			a++; 
		}
		System.out.println("Descending "+Arrays.toString(irr2));
	}


Output
=======

Before [2, 4, 1, 3, 5, 7, 6]
After [1, 2, 3, 4, 5, 6, 7]
Descending [7, 6, 5, 4, 3, 2, 1]



Jumping Statements
==================

Break
=====
for (int i = 0; i < 5; i++) {
	System.out.println(i);
	if (i==2) {
		break;
			} 
		}


output
======
0
1
2


Continue
========
for (int i = 0; i < 5; i++) {
			
	if (i==2) {
		continue;
	} System.out.println(i);
		}

output
======
0
1
3
4





Keywords
========

Static , Final and abstract
---------------------------

abstract - > We cannot instantiate the class / we cannot able to create object for the class
             We cannot write method body 
             We cant declare variable as abstract

Final -> Final class cannot be inherited         
         Final methods cannot be Over ride
         Final variable value cannot be changed

static -> If we declare method as static , we can call them without creating object in same class and in different we can call using classname.methodname
          If we declare Variable as static, we can call them without creating object in same class and in different we can call using classname.variablename
          We can declare as class as static
         

return, break and continue
---------------------------

return -> it will return value which we declared with return keyword

break -> break the loop once the condition is met

continue -> It will skip the particular iteration and performs the rest, when the condition is met


Variables
=========
Local            -> It is declared inside a method, it has power only inside the method , when we call method it will be utilised.
                    Local variable need to be initialised
Global/Instance  -> Its declared outside the method, inside the class, Not need to initialize, it will take default value
                    Its will have power once object is created
Static           -> Its declared outside the method using static keyword, inside the class, Not need to initialize, it will take default value
                    It will have power once the class is active

Difference between Static and normal/Instance methods
-----------------------------------------------------
Instance methods can access the instance methods and instance variables directly.
Instance methods can access static variables and static methods directly.
Static methods can access the static variables and static methods directly.
Static methods canâ€™t access instance methods and instance variables directly. They must use references to objects.